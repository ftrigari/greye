// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/application/monitor": {
            "get": {
                "description": "Register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Application"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "type": "string",
                        "example": "http://example.com",
                        "description": "url",
                        "name": "url",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/models.SchedulerApplication"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.EasyResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Application"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration information",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SchedulerApplication"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.EasyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.EasyResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.EasyResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/application/monitor/pod": {
            "get": {
                "description": "get all applications distinct by pod",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Application"
                ],
                "summary": "get monitored applications by pod",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.SchedulerApplication"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.EasyResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/application/monitor/{service}": {
            "delete": {
                "description": "Rimuove il monitoraggio per un'applicazione specifica identificata dal suo nome.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Application"
                ],
                "summary": "Unschedule application monitoring",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Nome del servizio da rimuovere",
                        "name": "service",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.EasyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.EasyResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.EasyResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cluster": {
            "delete": {
                "description": "Register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Register a new user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.EasyResponses"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.EasyResponses"
                        }
                    }
                }
            }
        },
        "/api/v1/cluster/status": {
            "get": {
                "description": "Register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Register a new user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ClusterInfoDetails"
                        }
                    }
                }
            },
            "put": {
                "description": "Register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration information",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ClusterInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ClusterInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.EasyResponses"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.EasyResponses"
                        }
                    }
                }
            }
        },
        "/api/v1/cluster/suspend": {
            "put": {
                "description": "Register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration information",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SingleUpdateNode"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ClusterInfoDetails"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.EasyResponses"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.EasyResponses"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ClusterInfo": {
            "type": "object",
            "properties": {
                "cluster-info": {
                    "$ref": "#/definitions/sync.Map"
                },
                "ip": {
                    "type": "string"
                }
            }
        },
        "models.ClusterInfoDetails": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/models.ErrorCluster"
                },
                "status": {
                    "$ref": "#/definitions/models.ClusterStatus"
                },
                "stopMonitoringUntil": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "models.ClusterStatus": {
            "type": "string",
            "enum": [
                "running",
                "deleted",
                "suspended",
                "error"
            ],
            "x-enum-varnames": [
                "Running",
                "Deleted",
                "Suspended",
                "Error"
            ]
        },
        "models.EasyResponse": {
            "type": "object",
            "properties": {
                "error": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "models.EasyResponses": {
            "type": "object",
            "properties": {
                "error": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ErrorCluster": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "error_count": {
                    "type": "integer"
                },
                "found_by": {
                    "type": "string"
                }
            }
        },
        "models.SchedulerApplication": {
            "type": "object",
            "properties": {
                "body": {},
                "failedRequest": {
                    "type": "integer"
                },
                "forcePodMonitorInstance": {
                    "type": "string"
                },
                "header": {
                    "description": "Method              string        ` + "`" + `json:\"method\"` + "`" + `",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "host": {
                    "type": "string"
                },
                "interval": {
                    "$ref": "#/definitions/time.Duration"
                },
                "maxFailedRequests": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "scheduledApplication": {
                    "type": "string"
                },
                "stopMonitoringUntil": {
                    "type": "string"
                },
                "timeout": {
                    "$ref": "#/definitions/time.Duration"
                }
            }
        },
        "models.SingleUpdateNode": {
            "type": "object",
            "properties": {
                "ip": {
                    "type": "string"
                },
                "stopMonitoringUntil": {
                    "type": "string"
                }
            }
        },
        "sync.Map": {
            "type": "object"
        },
        "time.Duration": {
            "type": "integer",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
